name: RDKit CFFI Windows VS 2024.09

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with debug logging'
        required: false
        default: false
        type: boolean
  # push:
  #   branches:
  #     - "**"
  # pull_request:
  #   branches:
  #     - "**"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Configure git line endings
        run: git config --global core.autocrlf input

      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          conda-solver: libmamba
          use-only-tar-bz2: true

      - name: Create environment file
        shell: cmd
        run: |
          echo Creating environment file...
          echo name: rdkit_build > environment.yml
          echo channels: >> environment.yml
          echo   - conda-forge >> environment.yml
          echo dependencies: >> environment.yml
          echo   - boost >> environment.yml
          echo   - boost-cpp >> environment.yml
          echo   - cairo >> environment.yml
          echo   - eigen >> environment.yml
          echo   - cmake >> environment.yml
          echo Environment file created:
          type environment.yml

      - name: Create conda environment
        shell: powershell
        run: |
          Write-Host "=== CREATING CONDA ENVIRONMENT ==="
          conda env create -f environment.yml
          $envCreationCode = $LASTEXITCODE
          Write-Host "Environment creation exit code: $envCreationCode"
          
          if ($envCreationCode -ne 0) {
            Write-Host "ERROR: Failed to create environment from file!"
            Write-Host "=== TRYING MANUAL CREATION ==="
            conda create --name rdkit_build -c conda-forge boost boost-cpp cairo eigen cmake
            $manualCreationCode = $LASTEXITCODE
            Write-Host "Manual creation exit code: $manualCreationCode"
          }
          
          Write-Host "=== VERIFYING ENVIRONMENT ==="
          conda info --envs
          conda list -n rdkit_build

      - name: Verify conda environment
        shell: powershell
        run: |
          Write-Host "Verifying rdkit_build environment exists..."
          $envCheck = conda info --envs | Select-String "rdkit_build"
          if (-not $envCheck) {
            Write-Host "ERROR: rdkit_build environment not found!"
            Write-Host "Available environments:"
            conda info --envs
            exit 1
          }
          Write-Host "Environment found, testing activation..."
          conda activate rdkit_build
          Write-Host "Environment activated successfully!"
          conda list | Select-String "boost"

      - name: Clone main RDKit repo
        run: |
          git clone https://github.com/rdkit/rdkit.git --branch Release_2024_09 --single-branch rdkit --depth=1

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            rdkit/build/CMakeCache.txt
            rdkit/build/CMakeFiles
            rdkit/build/lib
            rdkit/build/bin
          key: ${{ runner.os }}-rdkit-vs-build-${{ hashFiles('**/rdkit_cffi_win_vs.yml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-rdkit-vs-build-${{ hashFiles('**/rdkit_cffi_win_vs.yml') }}-
            ${{ runner.os }}-rdkit-vs-build-

      - name: Configure build (Run CMake)
        shell: powershell
        run: |
          $env:Boost_ROOT = ""
          Set-Location rdkit
          New-Item -ItemType Directory -Name build -Force
          Set-Location build
          
          Write-Host "=== ACTIVATING CONDA ENVIRONMENT ==="
          conda activate rdkit_build
          Write-Host "Conda environment: $env:CONDA_DEFAULT_ENV"
          Write-Host "Conda prefix: $env:CONDA_PREFIX"
          
          cmake .. `
            -G "Visual Studio 17 2022" `
            -DCMAKE_BUILD_TYPE=Release `
            -DRDK_INSTALL_INTREE=ON `
            -DRDK_INSTALL_STATIC_LIBS=OFF `
            -DRDK_BUILD_CPP_TESTS=ON `
            -DRDK_BUILD_PYTHON_WRAPPERS=OFF `
            -DRDK_BUILD_COORDGEN_SUPPORT=ON `
            -DRDK_BUILD_MAEPARSER_SUPPORT=ON `
            -DRDK_OPTIMIZE_POPCNT=ON `
            -DRDK_BUILD_TEST_GZIP=ON `
            -DRDK_BUILD_FREESASA_SUPPORT=ON `
            -DRDK_BUILD_AVALON_SUPPORT=ON `
            -DRDK_BUILD_INCHI_SUPPORT=ON `
            -DRDK_BUILD_YAEHMOP_SUPPORT=ON `
            -DRDK_BUILD_XYZ2MOL_SUPPORT=ON `
            -DRDK_BUILD_CAIRO_SUPPORT=ON `
            -DRDK_BUILD_THREADSAFE_SSS=ON `
            -DRDK_BUILD_SWIG_WRAPPERS=OFF `
            -DRDK_BUILD_CFFI_LIB=ON `
            -DRDK_CFFI_STATIC=ON `
            -DRDK_SWIG_STATIC=OFF `
            -DRDK_TEST_MULTITHREADED=ON `
            -DCMAKE_INCLUDE_PATH="$env:CONDA_PREFIX/Library/include" `
            -DCMAKE_LIBRARY_PATH="$env:CONDA_PREFIX/Library/lib" `

      - name: Build
        shell: powershell
        run: |
          Write-Host "=== STARTING BUILD ==="
          Set-Location rdkit/build
          Write-Host "Activating rdkit_build environment..."
          conda activate rdkit_build
          $activationCode = $LASTEXITCODE
          Write-Host "Conda activation exit code: $activationCode"
          Write-Host "Current conda environment:"
          Write-Host $env:CONDA_DEFAULT_ENV
          Write-Host "Conda prefix:"
          Write-Host $env:CONDA_PREFIX
          
          Write-Host "=== RUNNING CMAKE BUILD ==="

          # Capture both stdout and stderr
          cmake --build . --config Release --target rdkitcffi --verbose -j 2 2>&1
          $buildCode = $LASTEXITCODE
          
          Write-Host "Build exit code: $buildCode"
  
          # Check if build failed
          if ($buildCode -ne 0) {
            Write-Host "=== BUILD FAILED ==="
            Write-Host "Build failed with exit code: $buildCode"
            exit $buildCode
          } else {
            Write-Host "=== BUILD SUCCESSFUL ==="
          }
          
      - name: Create build artifacts
        shell: powershell
        run: |
          Write-Host "=== CREATING ARTIFACT DIRECTORY ==="
          New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64"
          
          Write-Host "=== COPYING BUILD ARTIFACTS ==="
          
          $BUILD = Get-Date -Format "yyyyMMdd"
          Write-Host "Using date as build number: $BUILD"
          
          # Copy DLL from known location
          $dllSource = "rdkit\build\bin\Release\rdkitcffi.dll"
          $dllDest = "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\rdkitcffi.dll.$BUILD"
          
          Copy-Item $dllSource $dllDest
          Write-Host "Copied DLL to: $dllDest"
          Get-ChildItem $dllDest | Format-Table Name, Length

          
          # Copy LIB from known location
          $libSource = "rdkit\build\lib\Release\rdkitcffi.lib"
          $libDest = "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\rdkitcffi.lib.$BUILD"
          
          Copy-Item $libSource $libDest
          Write-Host "Copied LIB to: $libDest"
          Get-ChildItem $libDest | Format-Table Name, Length
           
          Write-Host "=== FINAL ARTIFACT DIRECTORY CONTENTS ==="
          $artifactDir = "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64"
          $files = Get-ChildItem $artifactDir
          $files | Format-Table Name, Length

      - name: Create artifact
        shell: powershell
        run: |
          Write-Host "=== CREATING ZIP ARTIFACT ==="
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Creating zip file..."
          Compress-Archive -Path "rdkitcffi_windows" -DestinationPath "rdkitcffi_windows_vs.zip" -Force
          Write-Host "Zip file created:"
          Get-ChildItem "rdkitcffi_windows_vs.zip" | Format-Table Name, Length
          Write-Host "Zip file contents:"
          Expand-Archive -Path "rdkitcffi_windows_vs.zip" -DestinationPath "test_extract" -Force
          Get-ChildItem "test_extract" -Recurse | Format-Table FullName, Length

      - name: Verify zip file exists
        shell: powershell
        run: |
          Write-Host "=== VERIFYING ZIP FILE FOR RELEASE ==="
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Files in current directory:"
          Get-ChildItem | Where-Object Name -match "zip" | Format-Table Name, Length, LastWriteTime
          Write-Host "Checking for rdkitcffi_windows_vs.zip:"
          if (Test-Path "rdkitcffi_windows_vs.zip") {
            Write-Host "✅ Zip file found!"
            $zipInfo = Get-ChildItem "rdkitcffi_windows_vs.zip"
            Write-Host "Zip file details:"
            Write-Host "  Name: $($zipInfo.Name)"
            Write-Host "  Size: $($zipInfo.Length) bytes"
            Write-Host "  Created: $($zipInfo.CreationTime)"
            Write-Host "  Modified: $($zipInfo.LastWriteTime)"
          } else {
            Write-Host "❌ Zip file not found!"
            Write-Host "Available files:"
            Get-ChildItem | Format-Table Name, Length
            exit 1
          }

      - name: Create Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: softprops/action-gh-release@v1
        with:
          files: rdkitcffi_windows_vs.zip
          tag_name: rdkit-windows-vs-latest
          name: Latest RDKit CFFI Windows VS Build
          body: Automated RDKit CFFI Windows DLL build using Visual Studio
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 