name: RDKit CFFI Windows VS 2024.09

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with debug logging'
        required: false
        default: false
        type: boolean
  # push:
  #   branches:
  #     - "**"
  # pull_request:
  #   branches:
  #     - "**"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Configure git line endings
        run: git config --global core.autocrlf input

      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          conda-solver: libmamba
          use-only-tar-bz2: true

      - name: Create environment file
        shell: cmd
        run: |
          echo Creating environment file...
          echo name: rdkit_build > environment.yml
          echo channels: >> environment.yml
          echo   - conda-forge >> environment.yml
          echo dependencies: >> environment.yml
          echo   - boost >> environment.yml
          echo   - boost-cpp >> environment.yml
          echo   - cairo >> environment.yml
          echo   - eigen >> environment.yml
          echo   - cmake >> environment.yml
          echo Environment file created:
          type environment.yml

      - name: Create conda environment
        shell: powershell
        run: |
          Write-Host "=== CREATING CONDA ENVIRONMENT ==="
          conda env create -f environment.yml
          $envCreationCode = $LASTEXITCODE
          Write-Host "Environment creation exit code: $envCreationCode"
          
          if ($envCreationCode -ne 0) {
            Write-Host "ERROR: Failed to create environment from file!"
            Write-Host "=== TRYING MANUAL CREATION ==="
            conda create --name rdkit_build -c conda-forge boost boost-cpp cairo eigen cmake
            $manualCreationCode = $LASTEXITCODE
            Write-Host "Manual creation exit code: $manualCreationCode"
          }
          
          Write-Host "=== VERIFYING ENVIRONMENT ==="
          conda info --envs
          conda list -n rdkit_build

      - name: Verify conda environment
        shell: powershell
        run: |
          Write-Host "Verifying rdkit_build environment exists..."
          $envCheck = conda info --envs | Select-String "rdkit_build"
          if (-not $envCheck) {
            Write-Host "ERROR: rdkit_build environment not found!"
            Write-Host "Available environments:"
            conda info --envs
            exit 1
          }
          Write-Host "Environment found, testing activation..."
          conda activate rdkit_build
          Write-Host "Environment activated successfully!"
          conda list | Select-String "boost"

      - name: Clone main RDKit repo
        run: |
          git clone https://github.com/rdkit/rdkit.git --branch Release_2024_09 --single-branch rdkit --depth=1

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            rdkit/build/CMakeCache.txt
            rdkit/build/CMakeFiles
            rdkit/build/lib
            rdkit/build/bin
          key: ${{ runner.os }}-rdkit-vs-build-${{ hashFiles('**/rdkit_cffi_win_vs.yml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-rdkit-vs-build-${{ hashFiles('**/rdkit_cffi_win_vs.yml') }}-
            ${{ runner.os }}-rdkit-vs-build-

      - name: Configure build (Run CMake)
        shell: powershell
        run: |
          $env:Boost_ROOT = ""
          Set-Location rdkit
          New-Item -ItemType Directory -Name build -Force
          Set-Location build
          
          Write-Host "=== ACTIVATING CONDA ENVIRONMENT ==="
          conda activate rdkit_build
          Write-Host "Conda environment: $env:CONDA_DEFAULT_ENV"
          Write-Host "Conda prefix: $env:CONDA_PREFIX"
          
          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_BUILD_TYPE=Release `
            -DRDK_BUILD_CFFI_LIB=ON `
            -DRDK_BUILD_MINIMAL_LIB=ON `
            -DRDK_CFFI_STATIC=ON `
            -DRDK_INSTALL_INTREE=ON `
            -DRDK_INSTALL_STATIC_LIBS=OFF `
            -DRDK_INSTALL_DLLS_MSVC=ON `
            -DRDK_BUILD_CPP_TESTS=OFF `
            -DRDK_BUILD_PYTHON_WRAPPERS=OFF `
            -DRDK_BUILD_COORDGEN_SUPPORT=ON `
            -DRDK_BUILD_MAEPARSER_SUPPORT=ON `
            -DRDK_OPTIMIZE_POPCNT=ON `
            -DRDK_BUILD_TEST_GZIP=ON `
            -DRDK_BUILD_FREESASA_SUPPORT=ON `
            -DRDK_BUILD_AVALON_SUPPORT=ON `
            -DRDK_BUILD_INCHI_SUPPORT=ON `
            -DRDK_BUILD_YAEHMOP_SUPPORT=ON `
            -DRDK_BUILD_XYZ2MOL_SUPPORT=ON `
            -DRDK_BUILD_CAIRO_SUPPORT=ON `
            -DRDK_BUILD_THREADSAFE_SSS=ON `
            -DRDK_BUILD_SWIG_WRAPPERS=OFF `
            -DRDK_SWIG_STATIC=OFF `
            -DRDK_TEST_MULTITHREADED=ON `
            -DRDK_USE_BOOST_SERIALIZATION=ON `
            -DRDK_USE_BOOST_IOSTREAMS=ON `
            -DCMAKE_INCLUDE_PATH="$env:CONDA_PREFIX/Library/include" `
            -DCMAKE_LIBRARY_PATH="$env:CONDA_PREFIX/Library/lib"

      - name: Build
        shell: powershell
        run: |
          Write-Host "=== STARTING BUILD ==="
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Changing to build directory..."
          Set-Location rdkit/build
          Write-Host "Current directory after cd:"
          Get-Location
          
          Write-Host "=== CONDA ENVIRONMENT ACTIVATION ==="
          Write-Host "Available conda environments:"
          conda info --envs
          Write-Host "Activating rdkit_build environment..."
          conda activate rdkit_build
          $activationCode = $LASTEXITCODE
          Write-Host "Conda activation exit code: $activationCode"
          Write-Host "Current conda environment:"
          Write-Host $env:CONDA_DEFAULT_ENV
          Write-Host "Conda prefix:"
          Write-Host $env:CONDA_PREFIX
          
          Write-Host "=== BUILD DIRECTORY CONTENTS BEFORE BUILD ==="
          Get-ChildItem
          
          Write-Host "=== CHECKING CMAKE AND BUILD TOOLS ==="
          Get-Command cmake
          cmake --version
          $cmakeVersionCode = $LASTEXITCODE
          Write-Host "CMake version exit code: $cmakeVersionCode"
          
          Write-Host "=== RUNNING CMAKE BUILD ==="
          Write-Host "Command: cmake --build . --config Release --target rdkitcffi -j 2 --verbose"
          
          Write-Host "=== TESTING BASIC COMMANDS FIRST ==="
          Write-Host "Testing basic PowerShell output:"
          Write-Host "This is a test output from PowerShell"
          
          Write-Host "Testing directory listing:"
          Get-ChildItem . | Select-Object Name, LastWriteTime
          
          Write-Host "Testing cmake help (should produce output):"
          cmake --help | Select-String "Usage"
          
          Write-Host "=== TESTING CMAKE BUILD WITH SIMPLER APPROACH ==="
          Write-Host "First, let's try cmake without verbose to see if it produces any output:"
          
          # Capture both stdout and stderr
          $output = cmake --build . --config Release --target rdkitcffi 2>&1
          $simpleBuildCode = $LASTEXITCODE
          Write-Host "Simple build exit code: $simpleBuildCode"
          Write-Host "Build output:"
          Write-Host $output
          
          Write-Host "Now trying with verbose flag:"
          $verboseOutput = cmake --build . --config Release --target rdkitcffi -j 2 --verbose 2>&1
          $buildCode = $LASTEXITCODE
          Write-Host "Build exit code: $buildCode"
          Write-Host "Verbose build output:"
          Write-Host $verboseOutput
          
          Write-Host "=== BUILD DIRECTORY CONTENTS AFTER BUILD ==="
          Get-ChildItem
          
          Write-Host "=== CHECKING OUTPUT DIRECTORIES ==="
          Write-Host "Checking bin directory:"
          if (Test-Path bin) {
            Write-Host "bin directory exists:"
            Get-ChildItem bin
            if (Test-Path bin\Release) {
              Write-Host "bin\Release directory exists:"
              Get-ChildItem bin\Release
            } else {
              Write-Host "bin\Release directory does not exist"
            }
          } else {
            Write-Host "bin directory does not exist"
          }
          
          Write-Host "Checking lib directory:"
          if (Test-Path lib) {
            Write-Host "lib directory exists:"
            Get-ChildItem lib
            if (Test-Path lib\Release) {
              Write-Host "lib\Release directory exists:"
              Get-ChildItem lib\Release
            } else {
              Write-Host "lib\Release directory does not exist"
            }
          } else {
            Write-Host "lib directory does not exist"
          }
          
          # Check if build failed
          if ($buildCode -ne 0) {
            Write-Host "=== BUILD FAILED ==="
            Write-Host "Build failed with exit code: $buildCode"
            Write-Host "Checking for error logs..."
            if (Test-Path CMakeFiles\CMakeError.log) {
              Write-Host "=== CMakeError.log ==="
              Get-Content CMakeFiles\CMakeError.log
            }
            if (Test-Path CMakeFiles\CMakeOutput.log) {
              Write-Host "=== Last 50 lines of CMakeOutput.log ==="
              Get-Content CMakeFiles\CMakeOutput.log | Select-Object -Last 50
            }
            exit $buildCode
          } else {
            Write-Host "=== BUILD SUCCESSFUL ==="
          }

      - name: Create build artifacts
        shell: powershell
        run: |
          Write-Host "=== COMPREHENSIVE BUILD DIRECTORY ANALYSIS ==="
          Write-Host "Current working directory:"
          Get-Location
          
          Write-Host "=== CHECKING BUILD DIRECTORY STRUCTURE ==="
          if (Test-Path "rdkit") {
            Write-Host "rdkit directory exists"
            if (Test-Path "rdkit\build") {
              Write-Host "rdkit\build directory exists, contents:"
              Get-ChildItem "rdkit\build" | Format-Table Name, LastWriteTime, Length
              
              Write-Host "=== CHECKING FOR ANY DLL FILES ==="
              Write-Host "All DLL files in build directory:"
              Get-ChildItem "rdkit\build" -Recurse -Filter "*.dll" | Format-Table FullName, LastWriteTime, Length
              
              Write-Host "=== CHECKING FOR ANY RDKITCFFI FILES ==="
              Write-Host "All files containing 'rdkitcffi' or 'cffi':"
              Get-ChildItem "rdkit\build" -Recurse | Where-Object Name -match "rdkitcffi|cffi" | Format-Table FullName, LastWriteTime, Length
              
              Write-Host "=== CHECKING SPECIFIC DIRECTORIES ==="
              @("bin", "lib", "bin\Release", "lib\Release", "bin\Debug", "lib\Debug") | ForEach-Object {
                $dir = "rdkit\build\$_"
                if (Test-Path $dir) {
                  Write-Host "$dir directory exists, contents:"
                  Get-ChildItem $dir | Format-Table Name, LastWriteTime, Length
                } else {
                  Write-Host "$dir directory does not exist"
                }
              }
              
              Write-Host "=== CHECKING CMAKE FILES ==="
              if (Test-Path "rdkit\build\CMakeCache.txt") {
                Write-Host "CMakeCache.txt exists, checking build type and target:"
                Get-Content "rdkit\build\CMakeCache.txt" | Select-String "CMAKE_BUILD_TYPE|CFFI|TARGET"
              }
              
            } else {
              Write-Host "rdkit\build directory does not exist!"
            }
          } else {
            Write-Host "rdkit directory does not exist!"
          }
          
          Write-Host "=== CREATING ARTIFACT DIRECTORY ==="
          New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64"
          Write-Host '-----------------'
          Write-Host 'Looking for DLL files...'
          
          # Look for the DLL file in the bin directory
          if (Test-Path "rdkit\build\bin\Release\librdkitcffi.dll") {
            Write-Host 'Found librdkitcffi.dll in bin\Release directory'
            Get-ChildItem rdkit\build\bin\Release\librdkitcffi.dll
            Set-Location rdkit\build\bin\Release
            $BUILD = (git describe --tags --long HEAD).Split('-')[1]
            Copy-Item librdkitcffi.dll "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\librdkitcffi.dll.$BUILD"
          } elseif (Test-Path "rdkit\build\bin\Release\rdkitcffi.dll") {
            Write-Host 'Found rdkitcffi.dll in bin\Release directory'
            Get-ChildItem rdkit\build\bin\Release\rdkitcffi.dll
            Set-Location rdkit\build\bin\Release
            $BUILD = (git describe --tags --long HEAD).Split('-')[1]
            Copy-Item rdkitcffi.dll "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\rdkitcffi.dll.$BUILD"
          } elseif (Test-Path "rdkit\build\lib\Release\librdkitcffi.dll") {
            Write-Host 'Found librdkitcffi.dll in lib\Release directory'
            Get-ChildItem rdkit\build\lib\Release\librdkitcffi.dll
            Set-Location rdkit\build\lib\Release
            $BUILD = (git describe --tags --long HEAD).Split('-')[1]
            Copy-Item librdkitcffi.dll "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\librdkitcffi.dll.$BUILD"
          } else {
            Write-Host 'DLL file not found in expected locations.'
            Write-Host 'Checking if any DLL was built anywhere:'
            $allDlls = Get-ChildItem "rdkit\build" -Recurse -Filter "*.dll" -ErrorAction SilentlyContinue
            if ($allDlls) {
              Write-Host "Found DLL files in build directory:"
              $allDlls | Format-Table FullName, LastWriteTime, Length
              
              # Look for any CFFI-related DLL
              $cffiDll = $allDlls | Where-Object Name -match "cffi"
              if ($cffiDll) {
                Write-Host "Found CFFI-related DLL, copying it:"
                $cffiDll | Format-Table FullName, LastWriteTime, Length
                $BUILD = (git describe --tags --long HEAD).Split('-')[1]
                Copy-Item $cffiDll[0].FullName "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\$($cffiDll[0].Name).$BUILD"
              } else {
                Write-Host "No CFFI-related DLL found among built DLLs"
                exit 1
              }
            } else {
              Write-Host "No DLL files found anywhere in build directory"
              exit 1
            }
          }
          
          Write-Host 'Final artifact directory contents:'
          Get-ChildItem "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\"
          
          Write-Host 'Checking file sizes:'
          Get-ChildItem "$env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\" | Format-Table Name, Length

      - name: Create artifact
        run: |
          cd $env:GITHUB_WORKSPACE
          # Check if the directory exists and has files
          if (Test-Path "rdkitcffi_windows") {
            Write-Host "Found rdkitcffi_windows directory, contents:"
            Get-ChildItem -Recurse "rdkitcffi_windows"
            
            # Show current directory and file for debugging
            Write-Host "Current directory:"
            Get-Location
            Write-Host "Directory details:"
            Get-ChildItem "rdkitcffi_windows" | Format-List
          } else {
            Write-Host "ERROR: rdkitcffi_windows directory not found!"
            Get-ChildItem
            exit 1
          }

      - name: Verify directory exists
        run: |
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Files in current directory:"
          Get-ChildItem
          Write-Host "Checking for rdkitcffi_windows directory:"
          if (Test-Path "rdkitcffi_windows") {
            Write-Host "✅ Directory found!"
            Get-ChildItem "rdkitcffi_windows" -Recurse
          } else {
            Write-Host "❌ Directory not found!"
            exit 1
          }

      - name: Upload artifact to GitHub Actions
        uses: actions/upload-artifact@v4
        with:
          name: rdkitcffi_windows_vs
          path: rdkitcffi_windows
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: softprops/action-gh-release@v1
        with:
          files: rdkitcffi_windows
          tag_name: rdkit-windows-vs-latest
          name: Latest RDKit CFFI Windows VS Build
          body: Automated RDKit CFFI Windows DLL build using Visual Studio
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 