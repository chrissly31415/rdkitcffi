name: RDKit CFFI Windows VS 2024.09

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with debug logging'
        required: false
        default: false
        type: boolean
  # push:
  #   branches:
  #     - "**"
  # pull_request:
  #   branches:
  #     - "**"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Configure git line endings
        run: git config --global core.autocrlf input

      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true

      - name: Create conda environment
        shell: cmd
        run: |
          echo "=== CONDA ENVIRONMENT CREATION DEBUG ==="
          
          echo "=== CHECKING CONDA INSTALLATION ==="
          where conda
          conda --version
          echo "Conda location check exit code: %errorlevel%"
          
          echo "=== CHECKING CONDA CONFIG ==="
          conda config --show
          echo "Config check exit code: %errorlevel%"
          
          echo "Setting up conda configuration..."
          conda config --set always_yes yes --set changeps1 no
          echo "Config set successfully, exit code: %errorlevel%"
          
          echo "=== CONDA INFO ==="
          conda info -a
          echo "Info exit code: %errorlevel%"
          
          echo "=== INSTALLING LIBMAMBA SOLVER ==="
          conda install -n base conda-libmamba-solver
          echo "Libmamba solver installed, exit code: %errorlevel%"
          
          echo "=== SETTING SOLVER ==="
          conda config --set solver libmamba
          echo "Solver set to libmamba, exit code: %errorlevel%"
          
          echo "=== CHECKING AVAILABLE PACKAGES ==="
          echo "Checking boost packages:"
          conda search -c conda-forge boost | findstr "1.84"
          echo "Boost search exit code: %errorlevel%"
          
          echo "Checking boost-cpp packages:"
          conda search -c conda-forge boost-cpp | findstr "1.84"
          echo "Boost-cpp search exit code: %errorlevel%"
          
          echo "Checking libboost packages:"
          conda search -c conda-forge libboost | findstr "1.84"
          echo "Libboost search exit code: %errorlevel%"
          
          echo "Checking libboost-devel packages:"
          conda search -c conda-forge libboost-devel | findstr "1.84"
          echo "Libboost-devel search exit code: %errorlevel%"
          
          echo "=== CREATING ENVIRONMENT ==="
          echo "Command: conda create --name rdkit_build -c conda-forge --override-channels boost=1.84 boost-cpp=1.84 libboost=1.84 libboost-devel=1.84 cairo eigen cmake"
          conda create --name rdkit_build -c conda-forge --override-channels ^
              boost=1.84 boost-cpp=1.84 ^
              libboost=1.84 ^
              libboost-devel=1.84 ^
              cairo eigen cmake
          
          echo "=== ENVIRONMENT CREATION RESULT ==="
          echo "Exit code: %errorlevel%"
          
          if errorlevel 1 (
            echo "ERROR: Failed to create conda environment!"
            echo "=== TRYING FALLBACK ==="
            echo "Command: conda create --name rdkit_build -c conda-forge --override-channels boost boost-cpp libboost libboost-devel cairo eigen cmake"
            conda create --name rdkit_build -c conda-forge --override-channels ^
                boost boost-cpp libboost libboost-devel cairo eigen cmake
            echo "Fallback exit code: %errorlevel%"
          )
          
          echo "=== LISTING ALL ENVIRONMENTS ==="
          conda info --envs
          echo "Environments list exit code: %errorlevel%"
          
          echo "=== ACTIVATING AND CONFIGURING ENVIRONMENT ==="
          call conda activate rdkit_build
          echo "Activation exit code: %errorlevel%"
          
          conda config --env --add channels conda-forge
          echo "Added conda-forge channel, exit code: %errorlevel%"
          
          conda config --env --set channel_priority strict
          echo "Set channel priority to strict, exit code: %errorlevel%"
          
          echo "=== VERIFYING ENVIRONMENT ==="
          conda info --envs
          
          echo "=== TESTING ENVIRONMENT ACTIVATION ==="
          call conda activate rdkit_build
          echo "Final activation exit code: %errorlevel%"
          
          echo "=== LISTING INSTALLED PACKAGES ==="
          conda list
          
          echo "=== CHECKING SPECIFIC PACKAGES ==="
          conda list | findstr boost
          conda list | findstr cairo
          conda list | findstr eigen
          conda list | findstr cmake

      - name: Verify conda environment
        shell: cmd
        run: |
          echo "Verifying rdkit_build environment exists..."
          conda info --envs | findstr rdkit_build
          if errorlevel 1 (
            echo "ERROR: rdkit_build environment not found!"
            echo "Available environments:"
            conda info --envs
            exit 1
          )
          echo "Environment found, testing activation..."
          call conda activate rdkit_build
          echo "Environment activated successfully!"
          conda list | findstr boost

      - name: Clone main RDKit repo
        run: |
          git clone https://github.com/rdkit/rdkit.git --branch Release_2024_09 --single-branch rdkit --depth=1

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            rdkit/build/CMakeCache.txt
            rdkit/build/CMakeFiles
            rdkit/build/lib
            rdkit/build/bin
          key: ${{ runner.os }}-rdkit-vs-build-${{ hashFiles('**/rdkit_cffi_win_vs.yml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-rdkit-vs-build-${{ hashFiles('**/rdkit_cffi_win_vs.yml') }}-
            ${{ runner.os }}-rdkit-vs-build-

      - name: Configure build (Run CMake)
        shell: cmd
        run: |
          set Boost_ROOT=
          cd rdkit
          mkdir build && cd build
          call conda activate rdkit_build
          cmake .. ^
            -G "Visual Studio 17 2022" ^
            -A x64 ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DRDK_BUILD_CFFI_LIB=ON ^
            -DRDK_BUILD_MINIMAL_LIB=ON ^
            -DRDK_CFFI_STATIC=ON ^
            -DRDK_INSTALL_INTREE=ON ^
            -DRDK_INSTALL_STATIC_LIBS=OFF ^
            -DRDK_INSTALL_DLLS_MSVC=ON ^
            -DRDK_BUILD_CPP_TESTS=OFF ^
            -DRDK_BUILD_PYTHON_WRAPPERS=OFF ^
            -DRDK_BUILD_COORDGEN_SUPPORT=ON ^
            -DRDK_BUILD_MAEPARSER_SUPPORT=ON ^
            -DRDK_OPTIMIZE_POPCNT=ON ^
            -DRDK_BUILD_TEST_GZIP=ON ^
            -DRDK_BUILD_FREESASA_SUPPORT=ON ^
            -DRDK_BUILD_AVALON_SUPPORT=ON ^
            -DRDK_BUILD_INCHI_SUPPORT=ON ^
            -DRDK_BUILD_YAEHMOP_SUPPORT=ON ^
            -DRDK_BUILD_XYZ2MOL_SUPPORT=ON ^
            -DRDK_BUILD_CAIRO_SUPPORT=ON ^
            -DRDK_BUILD_THREADSAFE_SSS=ON ^
            -DRDK_BUILD_SWIG_WRAPPERS=OFF ^
            -DRDK_SWIG_STATIC=OFF ^
            -DRDK_TEST_MULTITHREADED=ON ^
            -DRDK_USE_BOOST_SERIALIZATION=ON ^
            -DRDK_USE_BOOST_IOSTREAMS=ON ^
            -DCMAKE_INCLUDE_PATH=%CONDA_PREFIX%/Library/include ^
            -DCMAKE_LIBRARY_PATH=%CONDA_PREFIX%/Library/lib

      - name: Build
        shell: cmd
        run: |
          cd rdkit/build
          call conda activate rdkit_build
          cmake --build . --config Release --target rdkitcffi -j 2
          
          # If build fails, show the error log
          if errorlevel 1 (
            echo Build failed. Showing last 100 lines of error log:
            if exist CMakeFiles\CMakeError.log (
              powershell -Command "Get-Content CMakeFiles\CMakeError.log | Select-Object -Last 100"
            )
            exit 1
          )

      - name: Create build artifacts
        run: |
          mkdir -p $env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64
          echo '-----------------'
          echo 'Looking for DLL files...'
          
          # Look for the DLL file in the bin directory
          if exist "rdkit\build\bin\Release\librdkitcffi.dll" (
            echo 'Found librdkitcffi.dll in bin\Release directory'
            dir rdkit\build\bin\Release\librdkitcffi.dll
            cd rdkit\build\bin\Release
            for /f "tokens=2 delims=-" %%i in ('git describe --tags --long HEAD') do set BUILD=%%i
            copy librdkitcffi.dll $env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\librdkitcffi.dll.%BUILD%
          ) else if exist "rdkit\build\bin\Release\rdkitcffi.dll" (
            echo 'Found rdkitcffi.dll in bin\Release directory'
            dir rdkit\build\bin\Release\rdkitcffi.dll
            cd rdkit\build\bin\Release
            for /f "tokens=2 delims=-" %%i in ('git describe --tags --long HEAD') do set BUILD=%%i
            copy rdkitcffi.dll $env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\rdkitcffi.dll.%BUILD%
          ) else if exist "rdkit\build\lib\Release\librdkitcffi.dll" (
            echo 'Found librdkitcffi.dll in lib\Release directory'
            dir rdkit\build\lib\Release\librdkitcffi.dll
            cd rdkit\build\lib\Release
            for /f "tokens=2 delims=-" %%i in ('git describe --tags --long HEAD') do set BUILD=%%i
            copy librdkitcffi.dll $env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\librdkitcffi.dll.%BUILD%
          ) else (
            echo 'DLL file not found. Listing bin\Release directory:'
            dir rdkit\build\bin\Release\ | findstr /i "rdkitcffi\|\.dll"
            echo 'Also checking lib\Release directory:'
            dir rdkit\build\lib\Release\ | findstr /i "rdkitcffi\|\.dll"
            exit 1
          )
          
          echo 'Final artifact directory contents:'
          dir $env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\
          
          echo 'Checking file sizes:'
          dir $env:GITHUB_WORKSPACE\rdkitcffi_windows\windows-64\ /-c

      - name: Create artifact
        run: |
          cd $env:GITHUB_WORKSPACE
          # Check if the directory exists and has files
          if (Test-Path "rdkitcffi_windows") {
            Write-Host "Found rdkitcffi_windows directory, contents:"
            Get-ChildItem -Recurse "rdkitcffi_windows"
            
            # Show current directory and file for debugging
            Write-Host "Current directory:"
            Get-Location
            Write-Host "Directory details:"
            Get-ChildItem "rdkitcffi_windows" | Format-List
          } else {
            Write-Host "ERROR: rdkitcffi_windows directory not found!"
            Get-ChildItem
            exit 1
          }

      - name: Verify directory exists
        run: |
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Files in current directory:"
          Get-ChildItem
          Write-Host "Checking for rdkitcffi_windows directory:"
          if (Test-Path "rdkitcffi_windows") {
            Write-Host "✅ Directory found!"
            Get-ChildItem "rdkitcffi_windows" -Recurse
          } else {
            Write-Host "❌ Directory not found!"
            exit 1
          }

      - name: Upload artifact to GitHub Actions
        uses: actions/upload-artifact@v4
        with:
          name: rdkitcffi_windows_vs
          path: rdkitcffi_windows
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: softprops/action-gh-release@v1
        with:
          files: rdkitcffi_windows
          tag_name: rdkit-windows-vs-latest
          name: Latest RDKit CFFI Windows VS Build
          body: Automated RDKit CFFI Windows DLL build using Visual Studio
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 