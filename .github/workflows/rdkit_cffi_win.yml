name: RDKit CFFI Windows 2024.09

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with debug logging'
        required: false
        default: false
        type: boolean
  # push:
  #   branches:
  #     - "**"
  # pull_request:
  #   branches:
  #     - "**"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Configure git line endings
        run: git config --global core.autocrlf input

      - uses: actions/checkout@v4

      - name: Cache MSYS2 packages
        uses: actions/cache@v4
        with:
          path: |
            C:\msys64\var\cache\pacman\pkg
            C:\msys64\var\lib\pacman\local
          key: ${{ runner.os }}-msys2-packages-${{ hashFiles('**/rdkit_cffi_win.yml') }}
          restore-keys: |
            ${{ runner.os }}-msys2-packages-

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-boost
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-bzip2
            mingw-w64-x86_64-xz
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            mingw-w64-x86_64-pkg-config
          pacboy: >-
            toolchain:p

      - name: Clone main RDKit repo
        shell: msys2 {0}
        run: |
          git clone https://github.com/rdkit/rdkit.git --branch Release_2024_09 --single-branch rdkit --depth=1

      - name: Apply CFFI wrapper patch
        shell: msys2 {0}
        run: |
          cd rdkit/Code/MinimalLib
          echo "=== CFFI WRAPPER PATCH DEBUG ==="
          
          echo "Checking if cffiwrapper.cpp exists..."
          ls -la cffiwrapper.cpp
          
          echo "Checking current content around 'using namespace RDKit;'..."
          grep -n "using namespace RDKit;" cffiwrapper.cpp || echo "Pattern not found"
          
          echo "Checking if patch is already applied..."
          if grep -q "updateSmilesWriteParamsFromJSON" cffiwrapper.cpp; then
            echo "Patch already applied - found updateSmilesWriteParamsFromJSON"
            grep -n "updateSmilesWriteParamsFromJSON" cffiwrapper.cpp
          else
            echo "Patch not found - applying..."
            
            # Create a backup
            cp cffiwrapper.cpp cffiwrapper.cpp.backup
            
            # Try the sed approach first
            echo "Attempting sed patch..."
            sed -i '/using namespace RDKit;/a\
            // Patch for missing functions in this RDKit version\
            namespace RDKit {\
            void updateSmilesWriteParamsFromJSON(SmilesWriteParams&, const char*) {\
              // Empty implementation - not needed for CFFI\
            }\
            void updateCXSmilesFieldsFromJSON(SmilesWrite::CXSmilesFields&, RestoreBondDirOption&, const char*) {\
              // Empty implementation - not needed for CFFI\
            }\
            }' cffiwrapper.cpp
            
            # Verify the patch was applied
            if grep -q "updateSmilesWriteParamsFromJSON" cffiwrapper.cpp; then
              echo "✅ Sed patch applied successfully"
              grep -n "updateSmilesWriteParamsFromJSON" cffiwrapper.cpp
            else
              echo "❌ Sed patch failed, trying alternative approach..."
              
              # Alternative: append to end of file
              echo "" >> cffiwrapper.cpp
              echo "// Patch for missing functions in this RDKit version" >> cffiwrapper.cpp
              echo "namespace RDKit {" >> cffiwrapper.cpp
              echo "void updateSmilesWriteParamsFromJSON(SmilesWriteParams&, const char*) {" >> cffiwrapper.cpp
              echo "  // Empty implementation - not needed for CFFI" >> cffiwrapper.cpp
              echo "}" >> cffiwrapper.cpp
              echo "void updateCXSmilesFieldsFromJSON(SmilesWrite::CXSmilesFields&, RestoreBondDirOption&, const char*) {" >> cffiwrapper.cpp
              echo "  // Empty implementation - not needed for CFFI" >> cffiwrapper.cpp
              echo "}" >> cffiwrapper.cpp
              echo "}" >> cffiwrapper.cpp
              
              # Verify the alternative patch
              if grep -q "updateSmilesWriteParamsFromJSON" cffiwrapper.cpp; then
                echo "✅ Alternative patch applied successfully"
                grep -n "updateSmilesWriteParamsFromJSON" cffiwrapper.cpp
              else
                echo "❌ All patch methods failed!"
                echo "Restoring backup..."
                cp cffiwrapper.cpp.backup cffiwrapper.cpp
                exit 1
              fi
            fi
          fi
          
          echo "=== FINAL VERIFICATION ==="
          echo "Checking for both functions:"
          grep -n "updateSmilesWriteParamsFromJSON\|updateCXSmilesFieldsFromJSON" cffiwrapper.cpp
          echo "Patch step completed"

      - name: Cache CMake and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            rdkit/build/CMakeCache.txt
            rdkit/build/CMakeFiles
            rdkit/build/lib
            rdkit/build/bin
          key: ${{ runner.os }}-rdkit-build-${{ hashFiles('**/rdkit_cffi_win.yml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-rdkit-build-${{ hashFiles('**/rdkit_cffi_win.yml') }}-
            ${{ runner.os }}-rdkit-build-

      - name: Configure build (Run CMake)
        shell: msys2 {0}
        run: |
          cd rdkit && mkdir -p build && cd build
          cmake .. \
            -G 'MSYS Makefiles' \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DRDK_BUILD_CFFI_LIB=ON \
            -DRDK_BUILD_MINIMAL_LIB=OFF \
            -DRDK_CFFI_STATIC=OFF \
            -DRDK_INSTALL_INTREE=OFF \
            -DRDK_BUILD_CPP_TESTS=OFF \
            -DRDK_BUILD_COORDGEN_SUPPORT=ON \
            -DRDK_BUILD_MAEPARSER_SUPPORT=OFF \
            -DRDK_OPTIMIZE_POPCNT=ON \
            -DRDK_BUILD_TEST_GZIP=OFF \
            -DRDK_BUILD_INCHI_SUPPORT=ON \
            -DRDK_BUILD_CAIRO_SUPPORT=ON \
            -DRDK_BUILD_THREADSAFE_SSS=ON \
            -DRDK_BUILD_SWIG_WRAPPERS=OFF \
            -DRDK_SWIG_STATIC=OFF \
            -DRDK_TEST_MULTITHREADED=ON \
            -DRDK_INSTALL_DLLS_MSVC=ON \
            -DRDK_BUILD_PYTHON_WRAPPERS=OFF \
            -DRDK_BUILD_PGSQL=OFF \
            -DRDK_PGSQL_STATIC=OFF \
            -DRDK_USE_BOOST_SERIALIZATION=ON \
            -DRDK_USE_BOOST_IOSTREAMS=ON \
            -DCAIRO_INCLUDE_DIR=/mingw64/include \
            -DCAIRO_LIBRARIES=/mingw64/lib/libcairo.dll.a \
            -DFREETYPE_INCLUDE_DIRS=/mingw64/include/freetype2 \
            -DFREETYPE_LIBRARY=/mingw64/lib/libfreetype.dll.a \
            -DZLIB_INCLUDE_DIR=/mingw64/include \
            -DZLIB_LIBRARY=/mingw64/lib/libz.dll.a \
            -DBZIP2_INCLUDE_DIR=/mingw64/include \
            -DBZIP2_LIBRARIES=/mingw64/lib/libbz2.dll.a \
            -DLIBLZMA_INCLUDE_DIR=/mingw64/include \
            -DLIBLZMA_LIBRARY=/mingw64/lib/liblzma.dll.a \
            -DCMAKE_INSTALL_PREFIX=/mingw64 \
            -DCMAKE_INCLUDE_PATH='/mingw64/include;/mingw64/x86_64-w64-mingw32/include' \
            -DCMAKE_LIBRARY_PATH='/mingw64/lib;/mingw64/x86_64-w64-mingw32/lib' \
            -DCMAKE_EXE_LINKER_FLAGS='-Wl,--allow-shlib-undefined' \
            -DCMAKE_SHARED_LINKER_FLAGS='-Wl,--allow-shlib-undefined' \
            -DCMAKE_C_FLAGS='-std=c17 -Wno-error=implicit-function-declaration -Wno-error=old-style-definition -Wno-error=incompatible-pointer-types -Wno-error=pointer-sign' \
            -DCMAKE_CXX_FLAGS='-std=c++17 -Wno-error=implicit-function-declaration -Wno-error=old-style-definition -Wno-error=incompatible-pointer-types -Wno-error=pointer-sign'

      - name: Build
        shell: msys2 {0}
        run: |
          cd rdkit/build
          # Build all required RDKit libraries first, then the CFFI library
          echo "Building RDKit libraries..."
          mingw32-make VERBOSE=1 -j 2
          
          # If build fails, show the error log
          if [ $? -ne 0 ]; then
            echo 'Build failed. Showing last 100 lines of error log:'
            cat CMakeFiles/CMakeError.log | tail -n 100
            exit 1
          fi

      - name: Create build artifacts
        shell: msys2 {0}
        run: |
          mkdir -p $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64
          echo '-----------------'
          echo 'Looking for DLL files...'
          
          # Look for the DLL file in the bin directory (where it's actually created)
          if [ -f 'rdkit/build/bin/librdkitcffi.dll' ]; then
            echo 'Found librdkitcffi.dll in bin directory'
            ls -l rdkit/build/bin/librdkitcffi.dll
            cd rdkit/build/bin
            BUILD=$(cd ../.. && git describe --tags --long HEAD | cut -d '-' -f 2)
            cp librdkitcffi.dll $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64/librdkitcffi.dll.$BUILD
            # Also create a symlink without version for easier access
            cd $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64
            ln -sf librdkitcffi.dll.$BUILD librdkitcffi.dll
          elif [ -f 'rdkit/build/bin/rdkitcffi.dll' ]; then
            echo 'Found rdkitcffi.dll in bin directory'
            ls -l rdkit/build/bin/rdkitcffi.dll
            cd rdkit/build/bin
            BUILD=$(cd ../.. && git describe --tags --long HEAD | cut -d '-' -f 2)
            cp rdkitcffi.dll $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64/rdkitcffi.dll.$BUILD
            # Also create a symlink without version for easier access
            cd $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64
            ln -sf rdkitcffi.dll.$BUILD rdkitcffi.dll
          elif [ -f 'rdkit/build/lib/librdkitcffi.dll' ]; then
            echo 'Found librdkitcffi.dll in lib directory'
            ls -l rdkit/build/lib/librdkitcffi.dll
            cd rdkit/build/lib
            BUILD=$(cd ../.. && git describe --tags --long HEAD | cut -d '-' -f 2)
            cp librdkitcffi.dll $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64/librdkitcffi.dll.$BUILD
            # Also create a symlink without version for easier access
            cd $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64
            ln -sf librdkitcffi.dll.$BUILD librdkitcffi.dll
          else
            echo 'DLL file not found. Listing bin directory:'
            ls -la rdkit/build/bin/ | grep -E "(rdkitcffi|\.dll)"
            echo 'Also checking lib directory:'
            ls -la rdkit/build/lib/ | grep -E "(rdkitcffi|\.dll)"
            exit 1
          fi
          
          echo 'Final artifact directory contents:'
          ls -la $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64/
          
          echo 'Checking file sizes:'
          ls -lh $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64/
          
          echo 'Verifying DLL file:'
          file $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64/librdkitcffi.dll

      - name: Create artifact
        run: |
          cd $env:GITHUB_WORKSPACE
          # Check if the directory exists and has files
          if (Test-Path "rdkitcffi_windows") {
            Write-Host "Found rdkitcffi_windows directory, contents:"
            Get-ChildItem -Recurse "rdkitcffi_windows"
            
            # Show current directory and file for debugging
            Write-Host "Current directory:"
            Get-Location
            Write-Host "Directory details:"
            Get-ChildItem "rdkitcffi_windows" | Format-List
          } else {
            Write-Host "ERROR: rdkitcffi_windows directory not found!"
            Get-ChildItem
            exit 1
          }

      - name: Verify directory exists
        run: |
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Files in current directory:"
          Get-ChildItem
          Write-Host "Checking for rdkitcffi_windows directory:"
          if (Test-Path "rdkitcffi_windows") {
            Write-Host "✅ Directory found!"
            Get-ChildItem "rdkitcffi_windows" -Recurse
          } else {
            Write-Host "❌ Directory not found!"
            exit 1
          }

      - name: Upload artifact to GitHub Actions
        uses: actions/upload-artifact@v4
        with:
          name: rdkitcffi_windows
          path: rdkitcffi_windows
          retention-days: 30

      - name: Create Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: softprops/action-gh-release@v1
        with:
          files: rdkitcffi_windows
          tag_name: rdkit-windows-latest
          name: Latest RDKit CFFI Windows Build
          body: Automated RDKit CFFI Windows DLL build
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 