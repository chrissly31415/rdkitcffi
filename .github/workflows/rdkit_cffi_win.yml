name: RDKit CFFI Windows 2024.09

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with debug logging'
        required: false
        default: false
        type: boolean
  # push:
  #   branches:
  #     - "**"
  # pull_request:
  #   branches:
  #     - "**"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Configure git line endings
        run: git config --global core.autocrlf input

      - uses: actions/checkout@v4

      - name: Cache MSYS2 packages
        uses: actions/cache@v4
        with:
          path: |
            C:\msys64\var\cache\pacman\pkg
            C:\msys64\var\lib\pacman\local
          key: ${{ runner.os }}-msys2-packages-${{ hashFiles('**/rdkit_cffi_win.yml') }}
          restore-keys: |
            ${{ runner.os }}-msys2-packages-

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-boost
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-bzip2
            mingw-w64-x86_64-xz
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            mingw-w64-x86_64-pkg-config
          pacboy: >-
            toolchain:p

      - name: Clone main RDKit repo
        shell: msys2 {0}
        run: |
          git clone https://github.com/rdkit/rdkit.git --branch Release_2024_09 --single-branch rdkit --depth=1

      - name: Cache CMake and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            rdkit/build/CMakeCache.txt
            rdkit/build/CMakeFiles
            rdkit/build/lib
            rdkit/build/bin
          key: ${{ runner.os }}-rdkit-build-${{ hashFiles('**/rdkit_cffi_win.yml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-rdkit-build-${{ hashFiles('**/rdkit_cffi_win.yml') }}-
            ${{ runner.os }}-rdkit-build-

      - name: Configure build (Run CMake)
        shell: msys2 {0}
        run: |
          cd rdkit && mkdir -p build && cd build
          cmake .. \
            -G 'MSYS Makefiles' \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DRDK_INSTALL_INTREE=OFF \
            -DRDK_INSTALL_STATIC_LIBS=OFF \
            -DRDK_BUILD_CPP_TESTS=OFF \
            -DRDK_BUILD_PYTHON_WRAPPERS=OFF \
            -DRDK_BUILD_COORDGEN_SUPPORT=ON \
            -DRDK_BUILD_MAEPARSER_SUPPORT=ON \
            -DRDK_OPTIMIZE_POPCNT=ON \
            -DRDK_BUILD_INCHI_SUPPORT=ON \
            -DRDK_BUILD_CAIRO_SUPPORT=ON \
            -DRDK_BUILD_CFFI_LIB=ON \
            -DRDK_CFFI_STATIC=OFF \
            -DRDK_BUILD_THREADSAFE_SSS=ON \
            -DRDK_BUILD_SWIG_WRAPPERS=OFF \
            -DRDK_SWIG_STATIC=OFF \
            -DRDK_TEST_MULTITHREADED=ON \
            -DRDK_INSTALL_DLLS_MSVC=ON \
            -DRDK_BUILD_PGSQL=OFF \
            -DRDK_PGSQL_STATIC=OFF \
            -DRDK_USE_BOOST_SERIALIZATION=OFF \
            -DRDK_USE_BOOST_IOSTREAMS=OFF \
            -DRDK_BUILD_MINIMAL_LIB=ON \
            -DCAIRO_INCLUDE_DIR=/mingw64/include \
            -DCAIRO_LIBRARIES=/mingw64/lib/libcairo.dll.a \
            -DFREETYPE_INCLUDE_DIRS=/mingw64/include/freetype2 \
            -DFREETYPE_LIBRARY=/mingw64/lib/libfreetype.dll.a \
            -DZLIB_INCLUDE_DIR=/mingw64/include \
            -DZLIB_LIBRARY=/mingw64/lib/libz.dll.a \
            -DBZIP2_INCLUDE_DIR=/mingw64/include \
            -DBZIP2_LIBRARIES=/mingw64/lib/libbz2.dll.a \
            -DLIBLZMA_INCLUDE_DIR=/mingw64/include \
            -DLIBLZMA_LIBRARY=/mingw64/lib/liblzma.dll.a \
            -DCMAKE_INSTALL_PREFIX=/mingw64 \
            -DCMAKE_INCLUDE_PATH='/mingw64/include;/mingw64/x86_64-w64-mingw32/include' \
            -DCMAKE_LIBRARY_PATH='/mingw64/lib;/mingw64/x86_64-w64-mingw32/lib'

      - name: Build
        shell: msys2 {0}
        run: |
          cd rdkit/build
          mingw32-make VERBOSE=1 -j 2 rdkitcffi
          # If build fails, show the error log
          if [ $? -ne 0 ]; then
            echo 'Build failed. Showing last 100 lines of error log:'
            cat CMakeFiles/CMakeError.log | tail -n 100
            exit 1
          fi

      - name: Create build artifacts
        shell: msys2 {0}
        run: |
          mkdir -p $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64
          echo '-----------------'
          # Look for the DLL file with different possible names
          if [ -f 'rdkit/build/lib/rdkitcffi.dll' ]; then
            ls -l rdkit/build/lib/rdkitcffi.dll
            cd rdkit/build/lib
            BUILD=$(cd ../.. && git describe --tags --long HEAD | cut -d '-' -f 2)
            cp rdkitcffi.dll $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64/rdkitcffi.dll.$BUILD
          elif [ -f 'rdkit/build/lib/librdkitcffi.dll' ]; then
            ls -l rdkit/build/lib/librdkitcffi.dll
            cd rdkit/build/lib
            BUILD=$(cd ../.. && git describe --tags --long HEAD | cut -d '-' -f 2)
            cp librdkitcffi.dll $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64/librdkitcffi.dll.$BUILD
          else
            echo 'DLL file not found. Listing lib directory:'
            ls -la rdkit/build/lib/
            exit 1
          fi
          ls -l $GITHUB_WORKSPACE/rdkitcffi_windows/windows-64

      - name: Create artifact
        run: |
          cd $env:GITHUB_WORKSPACE
          Compress-Archive -Path "rdkitcffi_windows" -DestinationPath "rdkitcffi_windows.zip"

      - name: Create Release
        if: github.ref == 'refs/heads/master'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ github.workspace }}/rdkitcffi_windows.zip
          tag_name: rdkit-windows-latest
          name: Latest RDKit CFFI Windows Build
          body: Automated RDKit CFFI Windows DLL build
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 